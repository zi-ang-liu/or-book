{
  "hash": "e04067aba11b8929db4ae5444ae65575",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nbibliography: ../references.bib\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\n# 経済的発注量\n\n**経済的発注量**（EOQ: Economic Order Quantity）モデルは、最も基本的な在庫管理モデルの一つである。@Harris1990-gh このモデルを最初に提案した。\n\nEOQモデルは、単位時間あたりの需要量は決定論的で、一定であると仮定する。すなわち、需要量は事前に分かっており、時間とともに変化しない。単位時間あたりの需要量は需要率（demand rate）と呼ばれ、記号 $d$ で表される。リードタイムは0とし、発注から納品までの時間はないと仮定する。一回の発注量を $Q$ とし、一定であるとする。欠品は許せないとする。全ての需要は満されなければならない。また、EOQモデルでは、在庫量は連続的に観測され、いつでも発注が可能であるとする。\n\n在庫に関わる費用は、発注費用 $K$、保管費用 $h$ と、購入費用（購入単価を $c$ と表す）がある。\n\nEOQモデルの最適解は次の二つの性質を持つ[@Snyder2019-iy]：\n\n1. Zero-inventory ordering (ZIO). 在庫量が0のときに発注を行う。リードタイムは0であるため、在庫量が0でないときに発注すると、保管費用が発生する。\n2. Constant order sizes. 発注量は一定である。需要率 $d$ が一定であり、在庫量が0のときに発注を行うため、最適発注量も一定である。\n\n以上の性質から、在庫量の時間的変化は下図のようになる。\n\n::: {#ec29e446 .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Parameters\nd = 250  # Demand rate\nQ = 500  # Order quantity\nT = Q / d  # Cycle length\nt = np.linspace(0, 3 * T, 1000)  # Time from 0 to 3 cycles\n\n# Inventory level over time\ninventory = np.maximum(0, Q - (d * t) % Q)\ninventory[0] = 0\n\n# Plotting the inventory level\n# plt.figure(figsize=(6, 4))\nplt.plot(t, inventory, label=\"Inventory Level\", color=\"black\", linewidth=2)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Inventory Level\")\nplt.axhline(0, color=\"gray\", linewidth=1)\nplt.ylim(bottom=0, top=Q + 100)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eoq_files/figure-html/cell-2-output-1.png){width=662 height=470}\n:::\n:::\n\n\n発注の間隔を**サイクル**(cycle)と呼び、サイクル期間は \n\n$$\nT = \\frac{Q}{d}\n$$\n\nで与えられる。\n\n::: {#exm-cycle}\n\nA社は、毎月250個の需要がある商品を取り扱っている。一回の発注量は500個とし、サイクル期間は\n\n$$\nT = \\frac{500}{250} = 2 \\text{ヶ月}\n$$\n\nとなる。\n:::\n\n### コスト関数\n\nここでは、1サイクルあたりのコストを考える。\n\n**発注費用**：発注は1回だけ行うため、発注費用は $K$ である。\n\n**購入費用**：$Q$ 個の商品を単価 $c$ で購入するため、購入費用は $cQ$ である。\n\n**保管費用**：在庫量はサイクル期間 $T$ の間に $Q$ 個から0個まで減少するため、平均在庫量は $\\frac{Q}{2}$ である。したがって、平均保管費用は $\\frac{hQ}{2}$ である。サイクル期間 $T$ は $\\frac{Q}{d}$ であるため、1サイクルあたりの保管費用は\n\n$$\n\\frac{hQ}{2} \\cdot T = \\frac{hQ^2}{2d}\n$$\n\nとなる。\n\n以上より、1サイクルあたりのコストは次のように表される。\n\n$$\nK + cQ + \\frac{hQ^2}{2d}\n$$\n\n平均コストは、これをサイクル期間 $T$ で割ったものとして定義される。したがって、平均コスト $g(Q)$ は次のように表される。\n\n$$\n\\begin{align*}\ng(Q) &= \\frac{1}{T} \\left( K + cQ + \\frac{hQ^2}{2d} \\right) \\\\\n&= \\frac{d}{Q} \\left( K + cQ + \\frac{hQ^2}{2d} \\right) \\\\\n&= \\frac{Kd}{Q} + c d + \\frac{hQ}{2}\n\\end{align*}\n$$\n\n以上より、平均コストは発注量 $Q$ の関数として次のように表される。\n\n$$\ng(Q) = \\frac{Kd}{Q} + cd + \\frac{hQ}{2}\n$$\n\n\n### 最適発注量\n\nEOQモデルの目的は、平均コスト $g(Q)$ を最小化する発注量 $Q$ を求めることである。\n\n平均コストの導関数 $g'(Q)$ が 0 となる点を求めることで、最適発注量 $Q^*$ を求めることができる。\n\n$$\ng'(Q) = -\\frac{Kd}{Q^2} + \\frac{h}{2} = 0\n$$\n\nこれを解くと、最適発注量\n\n$$\nQ^* = \\sqrt{\\frac{2Kd}{h}}\n$$\n\nを得る。これをEOQ公式（EOQ formula）と呼ぶ。$Q^*$ を経済的発注量と呼ぶ（経済的は最適という意味である）。\n\n:::{#rem-eoq-formulation}\n\n1. $Q^*$ は $c$ には依存しない。\n2. $h$ の増加に伴い、$Q^*$ は減少する。保管費用が高い場合は、少量で高い頻度で発注することが望ましい。\n3. $K$ の増加に伴い、$Q^*$ は増加する。発注費用が高い場合は、多量で低い頻度で発注することが望ましい。\n:::\n\n二階導関数 $g''(Q)$ を求めて、最適発注量が最小値を与えることを確認する。\n\n$$\ng''(Q) = \\frac{2Kd}{Q^3} > 0\n$$\n\n$g''(Q) > 0$ であるため、$Q^*$ は最小値を与える。\n\n$Q^*$ を用いて、最適なサイクル期間 $T^*$ を求めることができる。\n\n$$\nT^* = \\frac{Q^*}{d} = \\sqrt{\\frac{2K}{hd}}\n$$\n\n次の図は、発注コスト、保管コスト、平均コストの関係を示している。購入単価を $c = 0$ とする。\n\n::: {#2e6c5fc4 .cell execution_count=2}\n``` {.python .cell-code}\n# Parameters\nK = 500  # Order cost\nh = 15  # Holding cost\nc = 0  # Purchase cost\nQ = np.linspace(1, 50, 50)\n\n# Average cost function\ng = (K / Q) + c + (h * Q / 2)\n\n# Plotting the costs vs order quantity\n# plt.figure(figsize=(12, 6))\nplt.plot(Q, K / Q, label=\"Order Cost\", color=\"blue\", linewidth=2)\nplt.plot(Q, c + (h * Q / 2), label=\"Holding Cost\", color=\"orange\", linewidth=2)\nplt.plot(Q, g, label=\"Average Cost\", color=\"green\", linewidth=2)\nplt.axvline(\n    x=np.sqrt(2 * K / h),\n    color=\"red\",\n    linestyle=\"--\",\n    label=\"Optimal Order Quantity\",\n    linewidth=2,\n)\nplt.xlabel(\"Order Quantity (Q)\")\nplt.ylabel(\"Cost\")\nplt.tight_layout()\nplt.show()  \n```\n\n::: {.cell-output .cell-output-display}\n![](eoq_files/figure-html/cell-3-output-1.png){width=662 height=470}\n:::\n:::\n\n\n平均コストが最小となる発注量 $Q^*$ は、発注コストと保管コストの交差点である。すなわち、発注コストと保管コストを等しくする発注量は最適な発注量 $Q^*$ である。この性質は以下の式からわかる。\n\n$$\n\\frac{Kd}{Q^*} = \\frac{hQ^*}{2} \\Longrightarrow Q^* = \\sqrt{\\frac{2Kd}{h}}\n$$\n\n:::{#rem-eoq-cost}\n$Q$ の増加に伴い、平均発注コストは減少し、平均保管コストは増加する。逆もまた然りである。\n:::\n\n最適発注量 $Q^*$ を次の定理にまとめる。\n\n:::{#thm-eoq}\n\nEOQモデルにおいて、最適発注量 $Q^*$ は\n\n$$\nQ^* = \\sqrt{\\frac{2Kd}{h}}\n$$\n\nで与えられる。\n\n:::\n\n:::{#exm-eoq}\n\nある電気量販店では、毎月250台のPCが販売されている。発注費用は5000円、保管費用は1台あたり月150円、購入単価は10万円とする。このとき、最適発注量 $Q^*$ は次のように求められる。\n\n$$\nQ^* = \\sqrt{\\frac{2 \\cdot 5000 \\cdot 250}{150}}\n$$\n\n最適発注量 $Q^*$ を次で計算する。\n\n::: {#6c83cfba .cell execution_count=3}\n``` {.python .cell-code code-fold=\"false\"}\ndef eoq(K, d, h):\n    \"\"\"\n    Calculate the Economic Order Quantity (EOQ).\n\n    Parameters:\n    K (float): Order cost\n    d (float): Demand rate\n    h (float): Holding cost\n\n    Returns:\n    float: Optimal order quantity Q*\n    \"\"\"\n    return np.sqrt(2 * K * d / h)\n\n\nif __name__ == \"__main__\":\n    K = 5000  # Order cost\n    d = 250  # Demand rate (units per month)\n    h = 150  # Holding cost (per unit per month)\n\n    Q_star = eoq(K, d, h)\n    print(f\"Optimal Order Quantity (Q*): {Q_star:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOptimal Order Quantity (Q*): 129.10\n```\n:::\n:::\n\n\nPCの場合は、注文量が整数である必要があるため、$g(129)$ と $g(130)$ を比較して最適発注量を決定する。\n:::\n\n## リードタイム\n\nEOQ モデルでは、リードタイムは0と仮定している。リードタイムが $L > 0$ の場合も、最適発注量 $Q^*$ も変換せず、$L$ 期間前に $Q^*$ を発注すればよい。\n\nここでは、$r$ を発注点（reorder point）とする。在庫量が $r$ になったときに発注を行う。リードタイム $L$ の間に需要が $dL$ 個あるため、発注点は次のように表される。\n\n$$\nr = dL\n$$\n\n:::{prf:example}\n上の例で、リードタイムが一週間とし、一か月を4週間とすると、リードタイムは $L = 1/4$ となる。したがって、発注点は次のように求められる。\n\n$$\nr = dL = 250 \\times \\frac{1}{4} = 62.5\n$$\n\nPCの在庫量が63台になったときに発注を行う。\n:::\n\n## 他のEOQモデル\n\n- バックオーダーを考慮したEOQモデル\n- 数量割引（quantity discount）を考慮したEOQモデル\n  - 総量割引（all-units discount）\n  - 増分割引（incremental discount）\n\n",
    "supporting": [
      "eoq_files"
    ],
    "filters": [],
    "includes": {}
  }
}