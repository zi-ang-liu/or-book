{
  "hash": "9d20be4752f663878131b6549771b5f6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nbibliography:\n  - ../references.bib\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\n# 安全在庫\n\nこれまで紹介した在庫モデルは、需要が決定論的であると仮定していた。ここからは、需要が確率的であると仮定した在庫モデルを紹介する。\n\n## 在庫方策\n\n確率的在庫モデルにおいて、一つ重要な概念は**在庫方策**（inventory policy）である。在庫方策は、在庫の状況に応じて、在庫管理のルールを定めるものである。代表的な在庫方策を以下に示す。\n\n1. $(r, Q)$ 方策：在庫量を連続的に観測し、在庫量が発注点 $r$ 以下になったときに発注量 $Q$ を発注する方式である。**発注点方式**とも呼ばれる。\n2. BSP 方策（Base Stock Policy）：在庫量を定期的に観測し、在庫量が基準在庫 $S$ 以下になったときに、在庫量を $S$ まで補充する方式である。**定期発注方式**とも呼ばれる。\n3. $(s, S)$ 方策：在庫量を定期的に観測し、在庫量が発注点 $s$ 以下になったときに、在庫量を補充点 $S$ まで補充する方式である。\n\n一部の確率的在庫モデルにに対し、これらの在庫方策は**最適**であることが知られている。その場合、在庫方策が持つパラメータを最適化することで、在庫の期待コストを最小化することができる。\n\n## 問題設定\n\n需要 $D$ がある確率分布に従うと仮定する。リードタイムを $L$ とし、既知の定数とする。発注費用を $K$、単位あたりの保管費用を $h$ とする。在庫量が連続的に観測され、いつでも発注が可能であるとする**連続観測**の場合を考える。\n\n$(r, Q)$ 方策が用いられるとする。在庫量が発注点 $r$ 以下になったときに、発注量 $Q$ を発注する。この場合、発注点 $r$ と発注量 $Q$ を決定変数とし、在庫の**期待コスト**（expected cost）を最小化することを目的とする。\n\n:::{note}\nこの問題の定式化および厳密解法は、ここでは説明しない。@Snyder2019-iy の「Fundamentals of Supply Chain Theory」などの文献を参照されたい。\n以下は $(r, Q)$ の近似解法を紹介する。\n:::\n\n## 近似解法\n\n以下では、単位期間あたりの需要を $D$ とし、$D$ は正規分布 $N(\\mu, \\sigma^2)$ に従うと仮定する。ここで、$\\mu$ は平均需要、$\\sigma$ は需要の標準偏差である。\n\n### 発注量 $Q$\n\n$D$ の平均 $\\mu$ をEOQモデルの需要率とみなすと、発注量 $Q$ は次のように求めることができる[@Camm2022-zv]。\n\n$$\nQ = \\sqrt{\\frac{2K \\mu}{h}}\n$$\n\nまた、欠品費用も考慮する場合、バックオーダーを考慮した EOQ モデルを用いて、発注量 $Q$ は次のように求めることができる[@Hillier2025-cb]。\n\n$$\nQ = \\sqrt{\\frac{2K \\mu}{h}} \\sqrt{\\frac{p+h}{p}}\n$$\n$p$ は単位あたりの欠品費用である。\n\n得られた発注量 $Q$ は、最適解ではなく、近似解であることに注意されたい。\n\n### 発注点 $r$ \n\nリードタイム期間中に発生する需要は $D_L \\sim N(\\mu_L, \\sigma_L^2)$ とし、正規分布の再生性により、\n\n$$\n\\mu_L = \\mu L, \\quad \\sigma_L^2 = \\sigma^2 L\n$$\n\nになる。すなわち、リードタイム期間中の平均需要は $\\mu_L = \\mu L$、標準偏差は $\\sigma_L = \\sigma \\sqrt{L}$ である。\n\n発注点 $r$ を決めるためには、**サービスレベル**（service level）を考える。ここでは、サービスレベルを、リードタイム期間中に需要を満たす確率と定義する。サービスレベルを $\\alpha$ とし、$0 < \\alpha < 1$ とする。\n\n与えられたサービスレベル $\\alpha$ に対して、$D_L$ が発注点 $r$ 以下になる確率（欠品が発生しない確率、つまり、サービスレベル）が $\\alpha$ になるように発注点 $r$ を決定する。\n\n$$\nP(D_L \\leq r) = \\alpha\n$$\n\nもし、発注点 $r = \\mu_L$ とすると、$P(D_L \\leq \\mu_L) = 0.5$ となる。すなわち、50% の確率で欠品が発生することになる。\n\n$$\nP(D_L \\leq \\mu_L) = P\\left(\\frac{D_L - \\mu_L}{\\sigma_L} \\leq 0\\right) = \\Phi(0) = 0.5\n$$\n\nしたがって、サービスレベル $\\alpha > 0.5$ の場合、発注点 $r$ は平均需要 $\\mu_L$ より大きくなる必要がある。それを**安全在庫**（safety stock）と呼び、$s$ と表す。\n\n:::{#exm-safety-stock}\n単位期間あたりの需要 $D$ が連続一様分布 $U(200, 300)$ に従うと仮定する。平均需要は $\\mu = 250$ である。一回の発注量を $Q = 500$ とする。次の図は、在庫量の時間的変化を示す。灰色の領域は、需要の範囲を示す。赤い領域は、在庫量が0以下になったときの欠品を示す。黒い線は平均需要に基づく在庫量の変化を示す。\n\n::: {#8836245e .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport numpy as np\n\n# Parameters\nd_mean = 250  # Mean demand rate\nd_max = 300  # Max demand rate\nd_min = 200  # Min demand rate\nQ = 500  # Order quantity\nT = Q / d_mean  # Average cycle length\n\n# Simulate over multiple cycles to show repeated pattern\nn_cycles = 1\nt = np.linspace(0, n_cycles * T, 1000)\n\n# Inventory levels: linear depletion over time\ninventory_mean = Q - d_mean * (t % T)\ninventory_mean[0] = 0\ninventory_max = Q - d_max * (t % T)\ninventory_min = Q - d_min * (t % T)\n\n# Plotting\n# plt.figure(figsize=(12, 6))\nplt.plot(t, inventory_mean, label=\"Mean Demand\", color=\"black\", linewidth=2)\nplt.fill_between(\n    t, inventory_min, inventory_max, color=\"gray\", alpha=0.5, label=\"Demand Range\"\n)\n\n# Highlight when inventory drops below 0 (shortage)\nplt.fill_between(\n    t,\n    inventory_max,\n    0,\n    where=(inventory_max < 0),\n    color=\"red\",\n    alpha=0.3,\n    label=\"Shortage\",\n)\n\n# Aesthetics\nplt.axhline(0, color=\"gray\", linewidth=1)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Inventory Level\")\nplt.title(\"Inventory Level Over Time with Uniform Demand Distribution\")\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](safety_files/figure-html/cell-2-output-1.png){width=662 height=470}\n:::\n:::\n\n\n:::\n\nよって、発注点 $r$ は次のように表される。\n\n$$\nr = \\mu_L + s\n$$\n\n従って、$P(D_L \\leq r) = \\alpha$ は次のように表される。\n\n$$\nP(D_L \\leq \\mu_L + s) = \\alpha\n$$\n\nこの式を変形すると、\n\n$$\n\\begin{align*}\nP(D_L - \\mu_L \\leq s) &= \\alpha \\\\\nP\\left(\\frac{D_L - \\mu_L}{\\sigma_L} \\leq \\frac{s}{\\sigma_L}\\right) &= \\alpha \\\\\n\\Phi\\left(\\frac{s}{\\sigma_L}\\right) &= \\alpha \\\\\n\\frac{s}{\\sigma_L} &= \\Phi^{-1}(\\alpha) \\\\\ns &= \\sigma_L \\Phi^{-1}(\\alpha) \\\\\ns &= \\sigma \\sqrt{L} \\Phi^{-1}(\\alpha)\n\\end{align*}\n$$\n\nここで、$\\Phi(\\cdot)$ は標準正規分布の累計分布関数であり、$\\Phi^{-1}(\\alpha)$ はその逆関数である。したがって、発注点 $r$ は次のように表される。\n\n$$\nr = \\mu_L + s = \\mu L + \\sigma \\sqrt{L} \\Phi^{-1}(\\alpha)\n$$\n\n$\\Phi^{-1}(\\alpha)$ は標準正規分布表、Excel、Python などを用いて求めることができる。\n\n:::{exm-safety_stock}\nリードタイム $L = 4$、平均需要 $\\mu = 100$、需要の標準偏差 $\\sigma = 20$、サービスレベル $\\alpha = 0.95$ のとき、発注点 $r$ と安全在庫 $s$ を求める。\n\nリードタイム期間中の平均需要と標準偏差は次のように計算される。\n\n$$\n\\begin{align*}\n\\mu_L &= \\mu L = 100 \\cdot 4 = 400 \\\\\n\\sigma_L &= \\sigma \\sqrt{L} = 20 \\sqrt{4} = 40 \\\\\n\\end{align*}\n$$\n\n標準正規分布表から $\\Phi^{-1}(0.95) \\approx 1.64485$ を得る。これを用いて安全在庫 $s$ と発注点 $r$ を求める。\n\n$$\n\\begin{align*}\ns &= \\sigma_L \\Phi^{-1}(0.95) \\approx 40 \\cdot 1.64485 \\approx 65.79 \\\\\nr &= \\mu_L + s \\approx 400 + 65.79 \\approx 465.79\n\\end{align*}\n$$\n\nしたがって、発注点 $r$ は約465.79、必要な安全在庫 $s$ は約65.79となる。\n\nPython では、以下のように計算できる。\n\n::: {#4896fbb6 .cell execution_count=2}\n``` {.python .cell-code code-fold=\"false\"}\nfrom scipy.stats import norm\n\nL = 4\nmu = 100\nsigma = 20\nalpha = 0.95\n\nmu_L = mu * L\nsigma_L = sigma * (L**0.5)\n\ns = sigma_L * norm.ppf(alpha)\nr = mu_L + s\n\nprint(f\"reorder point: {r:.2f},  safety stock: {s:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nreorder point: 465.79,  safety stock: 65.79\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "safety_files"
    ],
    "filters": [],
    "includes": {}
  }
}