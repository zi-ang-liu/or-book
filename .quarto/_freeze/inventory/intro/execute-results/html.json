{
  "hash": "bd01319756a339e8970bf208af64540a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 在庫管理とは\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\n商店・工場・倉庫などで、原材料・部品・製品などを適切に管理することを**在庫管理**（Inventory Management）という。一般的に、在庫管理の目的は、顧客の需要を満たしつつ、在庫に関わる費用を最小化することである。\n\n::: {.callout-note}\n豊田自動車が提唱した**ジャストインタイム**（Just In Time, JIT）は、生産方式としてよく知られている。\n\nJIT とは必要なものを、必要な時に、必要な量だけ生産することである。JIT の目的は、在庫を最小限に抑え、効率的な生産を実現することである。\n\nアメリカの研究者らは、その生産方式を体系化し、**リーン生産方式**（Lean Manufacturing）という概念を提唱した。\n\n- [トヨタ生産方式](https://global.toyota/jp/company/vision-and-philosophy/production-system/)\n:::\n\n在庫が多すぎると、保管費用がかかる。逆に、在庫が少なすぎると、欠品が発生し、顧客の需要を満たせなくなる。在庫管理は次の二つの問題を決定する。\n\n1. どのくらいの量を発注するか？（発注量）\n2. いつ発注するか？（発注時期）\n\n科学的在庫管理（Scientific Inventory Management）では、これらの問題に答えるために、次の手順で在庫管理を行う。\n\n1. 在庫システムを数学モデルとして定式化する。\n2. 最適な発注量と発注時期を決定する。\n\n## 在庫モデルの分類\n\n在庫モデルは、次のような要素で分類される。\n\n需要（demand）\n: 需要が決定論的 (Deterministic) か確率的（Stochastic）か。\n\n観測（review）\n: 在庫量を連続観測 (Continuous Review) するか、周期観測 (Periodic Review) するか。連続観測の場合、在庫量が連続的に観測でき、いつでも発注が可能である。周期観測の場合、一定の期間（例えば1週間）ごとに在庫量を観測する。\n\nリードタイム（lead time）\n: 発注から納品までの期間。調達期間とも呼ばれる。リードタイムが決定論的か確率的か。また、リードタイムが0かどうか。在庫モデルを単純化するために、リードタイムを0とし、発注から納品までの期間を無視することもある。\n\nバックオーダー（backorder）\n: バックオーダーが許容されるかどうか。需要が在庫を上回った場合、バックオーダーが許容されると、欠品が発生しても、後で需要を満たすことができる。バックオーダーが許容されない場合、欠品が発生すると、上回った需要は失われ、機会損失が発生する。\n\n計画期間（planning horizon）\n: 単一期間 (Single Period) か、複数期間 (Multi Period) か、無限 (Infinite) か。\n\n以下の表に、需要と観測に基づいて、古典的な在庫モデルを示す。\n\n|在庫モデル|需要|観測|\n|--|--|--|\n|EOQモデル|決定論的|連続観測|\n|Wagner-Whitin|決定論的|周期観測|\n|安全在庫|確率的|連続観測|\n|新聞売り子問題|確率的|周期観測|\n\n## 在庫の費用\n\nここでは、在庫に関わる費用を紹介する。\n\n発注費用（ordering cost）\n: 発注量に関わらず、1回の発注にかかる費用。調達費用、固定費用（fixed cost）などとも呼ばれる。通常、1回の発注にかかる費用を $K$ とする。\n\n購入費用（purchase cost）\n: 商品を購入するためにかかる費用。通常、単位あたりの購入費用を $c$ とする。\n\n欠品費用（stockout cost）\n: 需要が在庫を上回った場合に発生する費用。通常、単位あたりの欠品費用を $p$ とする。\n\n保管費用（holding cost）\n: 在庫を保管するためにかかる倉庫費用、保険費用、税金、機会費用など。通常、単位時間あたりの1単位あたりの保管費用を $h$ とする。\n\n例えば、1日あたり1単位の在庫を保管するために、$h$ の費用がかかるとする。30日間、50単位の在庫を保管するための総保管費用は $30 \\times 50 \\times h = 1500h$ となる。下の図を見ると、保管費用は\n\n$$\n\\text{面積} \\times h = 1500h\n$$\n\nとなることがわかる。\n\n::: {#09d921be .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nt = np.linspace(0, 30, 1000)\ninventory = np.full_like(t, 50)\n\n# Plotting the inventory level\n# plt.figure(figsize=(2, 2))\nplt.fill_between(t, inventory, color=\"lightgray\", alpha=0.5, label=\"Inventory Level\")\nplt.plot(t, inventory, label=\"Inventory Level\", color=\"black\", linewidth=2)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Inventory Level\")\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.axhline(0, color=\"gray\", linewidth=1)\n# plt.xlim(0, 40)\n# plt.ylim(0, 60)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-2-output-1.png){width=662 height=471}\n:::\n:::\n\n\n一般的に、在庫量が定数ではなく、時間とともに変化する。例えば、発注量を $500$ とし、6 日間の在庫量を考える。\n\n::: {#a4f8eb7f .cell execution_count=2}\n``` {.python .cell-code}\n# Parameters\nd = 250  # Demand rate\nQ = 500  # Order quantity\nT = Q / d  # Cycle length\nt = np.linspace(0, 2.999 * T, 1000)\n\n# Inventory level over time\ninventory = np.maximum(0, Q - (d * t) % Q)\n\n# Plotting the inventory level\nplt.fill_between(t, inventory, color=\"lightgray\", alpha=0.5, label=\"Inventory Level\")\nplt.plot(t, inventory, label=\"Inventory Level\", color=\"black\", linewidth=2)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Inventory Level\")\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.axhline(0, color=\"gray\", linewidth=1)\nplt.ylim(bottom=0, top=Q + 200)\n# plt.xlim(0, 3.5 * T)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-3-output-1.png){width=663 height=471}\n:::\n:::\n\n\n保管費用は次のように計算される。\n\n$$\n\\frac{2 \\times 500}{2} \\times 3 \\times h\n$$\n\n<!-- \n## Note\n\n- [在庫最適化と安全在庫配置システム MESSA (MEta Safety Stock Allocation system)](https://scmopt.github.io/manual/03inventory.html)\n- [Snyder (2023)](https://doi.org/10.1287/educ.2023.0256)はStockpylという在庫最適化とシミュレーションのためのPythonライブラリを開発した。\n\nhttps://orsj.org/wp-content/or-archives50/pdf/bul/Vol.30_11_673.pdf\n\n\n### 用語\n\n| 英語                    | 日本語       |\n| ----------------------- | ------------ |\n| Economic Order Quantity | 経済的発注量 |\n| Deterministic           | 決定論的     |\n| Constant                | 一定         |\n| Demand Rate             | 需要率       |\n| Fixed Cost              | 固定費用     |\n| Cycle                   | サイクル     |\n| Inventory Level         | 在庫量       |\n| Order Quantity          | 発注量       |\n\n### 記号\n\n|  記号  | 説明                   |\n| :----: | :--------------------- |\n|  $d$   | 単位時間あたりの需要量 |\n|  $Q$   | 発注量                 |\n|  $K$   | 発注費用               |\n|  $h$   | 保管費用               |\n|  $c$   | 購入単価               |\n|  $T$   | サイクル期間           |\n| $g(Q)$ | 平均コスト             | -->\n\n",
    "supporting": [
      "intro_files"
    ],
    "filters": [],
    "includes": {}
  }
}